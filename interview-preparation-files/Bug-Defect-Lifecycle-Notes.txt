
```` Bug/Defect Lifecycle Overview ````

===============================================================================================================
Q1: What is the Bug/Defect Lifecycle? Explain its stages.
A:
The Bug Lifecycle (also called Defect Lifecycle) describes the progression of a bug from discovery to closure, helping teams systematically track and resolve defects during development and testing.

Stages:
New/Open: Bug is reported and logged in the defect tracking system, awaiting triage.
Assigned: Bug is assigned to a developer or team responsible for fixing it.
In Progress: Developer is actively working on resolving the bug.
Resolved/Fixed: Developer marks the bug as fixed and ready for testing.
Retest/Verify: Tester verifies the fix by retesting the issue.
Reopened: If the issue persists or recurs after retesting, the bug is reopened and sent back for fixing.
Closed: Bug is confirmed fixed and closed after successful verification.
Deferred: Bug is acknowledged but postponed for future releases due to low priority or resource constraints.
Won’t Fix: Bug is decided not to be fixed, often due to non-critical impact or design decisions.
Invalid/Rejected: Bug is not a valid defect (e.g., duplicate, not reproducible).

This lifecycle ensures clear communication, accountability, and effective defect management.
==============================================================================================================
Q) Explain the concept of defect logging and its importance in STLC ?
Ans.)
    - systematic documentation of defects found in the software application.
    - typically includes information such as defect ID, description, severity, steps to reproduce, screenshots, environment details, and status.
    - Defect logging provides a clear, standardized way to document issues, helping testers and developers communicate effectively.
    - It enables prioritization based on severity, tracks defect status, creates accountability, and provides historical data to improve product quality and testing strategies.

===============================================================================================================
Q)  Give one example of each bug type based on priority and severity:
Ans.) 

High Priority & Low Severity:
Example: A typo in the company logo’s alt text on the homepage.
Reason: Does not break functionality (low severity) but affects the company’s image, so must be fixed quickly (high priority).

High Priority & High Severity:
Example: The login page crashes and users cannot access their accounts.
Reason: Critical functionality broken (high severity) and requires immediate fix (high priority).

Low Priority & Low Severity:
Example: Slight misalignment of a rarely used icon on a settings page.
Reason: No functional impact (low severity) and not urgent (low priority).

Low Priority & High Severity:
Example: The system fails to generate PDF previews for archived engineering documents older than 10 years.
Reason: The issue is severe (PDF preview functionality is completely broken for those documents), but it’s low priority because those documents are rarely accessed, mostly for legacy reference, and don't impact current workflows.
===============================================================================================================
Q) Explain the Deferred State in Defect cycle.
Ans.)
@ Definition: Deferred state indicates that a defect is acknowledged but not prioritized for immediate resolution.
@ Reasons for Deferral: Low priority, resource constraints, business decisions, low impact, pending investigation.
@ Process: Document reasons, review in future sprints, communicate with stakeholders.
@ Lifecycle: Remains deferred until criteria change, then may move to "Open" or "In Progress."
@ Impact: Can focus team on critical issues but may lead to technical debt if too many defects are deferred.
===============================================================================================================
Q) Define Hotfix & Patches
Ans.)
Hotfix: A hotfix is a specific, emergency update applied to software to address a critical issue or bug that needs immediate attention, often without a full release cycle.
Patch: A patch is a broader term for updates that fix bugs, improve performance, or enhance security within software, usually packaged as part of a regular update cycle.

@ Key Differences:
    Deployment: Hotfixes are deployed swiftly in response to critical issues, while patches are scheduled updates.
    Scope: Hotfixes typically address a specific problem; patches may include multiple fixes and enhancements.
===============================================================================================================
Q) What is Defect Age ?
Ans.)
@ Definition: Defect age refers to the total time elapsed since a defect was first reported until it is resolved or closed.
@ Calculation: It is calculated by subtracting the defect discovery date from the defect resolution date.
@ Purpose: Helps in assessing the efficiency of the defect resolution process and identifying delays.
@ Importance: Tracking defect age allows teams to improve response times, prioritize bug fixes, and enhance overall software quality.
@ Impact on Metrics: A high defect age may indicate issues in the development process, resource allocation, or prioritization of tasks.
===============================================================================================================
Q) Define Latent Defect, Masked Defect, Defect Clustering, Defect Cascading ?
Ans.)
Latent Defect:  A latent defect is a flaw in the software that exists but has not yet been discovered or identified. It may remain hidden until specific conditions or inputs expose it.
Masked Defect:  A masked defect is an issue that is hidden or obscured by another defect or by specific conditions in the software, preventing it from being detected during testing.
Defect Clustering:  Defect clustering refers to the phenomenon where a large number of defects are found within a specific module or area of the software, indicating it may have inherent complexities or weaknesses.
Defect Cascading:   Defect cascading occurs when one defect leads to the manifestation of additional defects in the software, often resulting in a chain effect that complicates the overall defect resolution process.
===============================================================================================================
Q) Define Defect Rejection Ratio and Defect Leakage Ratio
Ans.)
    Defect Rejection Ratio: Percentage of reported defects rejected after evaluation.
    Defect Leakage Ratio: Percentage of defects found post-release that were missed during testing.
These metrics gauge testing effectiveness.
===============================================================================================================
Q) Define Bug Release and Bug Leakage
Ans.)
Bug Release:
    Bug release refers to the deployment of a software version that contains known bugs or defects.
    This means the bugs have been acknowledged, but the decision was made to release the software despite their presence, often due to business deadlines or prioritization.
Bug Leakage:
    Bug leakage refers to defects that are not detected during the testing phase and are discovered by end users after the software has been released.
    This indicates a failure in the testing process to identify critical issues before the product launch.
===============================================================================================================
Q) How to approach Test Planning for a defect.
Ans.)
    - To approach test planning for a defect, start by understanding the defect through its description and reproduction steps.
    - Identify the affected areas and define clear test objectives, like verifying the fix and ensuring no new issues arise.
    - Develop detailed test cases covering verification, relevant scenarios, and regression tests.
    - Choose between manual or automated testing, then schedule testing timelines and assign responsibilities to team members.
    - After reviewing the plan with stakeholders, execute the tests, document results, and report findings.
   Finally, perform retesting and regression tests, and formally close the defect once validated.
===============================================================================================================
Q) Explain the Difference in Bug-Error-Defect-Failure
Ans.)
Bug:    A bug is a generic term used to describe any flaw or issue in the software that may cause it to produce incorrect or unexpected results. It is often used interchangeably with defect.

Error:  An error refers to a human mistake made during software development, coding, or testing that can lead to defects. It is the actual incorrect action or oversight made by a developer or tester.

Defect:    A defect is a discrepancy between the expected behavior and the actual behavior of the software. It arises when the software does not meet its requirements or specifications due to errors made during development.

Failure:    A failure occurs when the software doesn't perform its intended function or operation in a production environment. It is the manifestation of a defect when the software is executed.
===============================================================================================================
Q) Explain the procedure for creating a Defect Report
Ans.)
Defect Report
    A defect report (or bug report) is a document that provides detailed information about a defect found in a software application.
    - Formal record for tracking defects throughout the software development lifecycle, facilitating communication between teams, prioritizing fixes, and ensuring quality in the final product.
    - Used to track, manage, and communicate details about the defect to the development and testing teams.
    - Key components of a defect report are Title, Defect ID, Description, Steps to Reproduce, Expected Result, Actual Result, Severity, Priority, Environment, Attachments, Status, Assigned To, Date Reported, Notes/Comments etc.
===============================================================================================================
Q) What is the difference between an exception and an error?
Ans.)
Exception:
    An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions.
    Exceptions are typically anticipated and can be handled using error-handling mechanisms such as try-catch blocks.
    They represent conditions that a program can potentially recover from (e.g., file not found, invalid input).
Error:
    An error is a serious issue that arises from the environment in which the program is executed or from the program's logic that usually cannot be handled or recovered.
    Errors often indicate fundamental problems (e.g., memory overflow, syntax errors) that may cause the program to terminate unexpectedly.
    Errors are generally not meant to be caught or handled by the program.
===============================================================================================================