
```` SQL & Database Testing Interview Q&A ````

================================================================================ 
Q) What is database testing, and why is it important?
Answer: Database testing ensures the correctness, integrity, and reliability of data within a database. It verifies that the database behaves as expected during data retrieval, insertion, deletion, and updates, ensuring that the application interacts with the database correctly.
================================================================================ 
Q) What is the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN?
Answer:
•	INNER JOIN: Returns only the rows where there is a match between both tables.
•	LEFT JOIN: Returns all rows from the left table, and matched rows from the right table; non-matching rows from the right table will be NULL.
•	RIGHT JOIN: Returns all rows from the right table, and matched rows from the left table; non-matching rows from the left table will be NULL.
•	FULL JOIN: Returns rows when there is a match in either table. Non-matching rows from both tables will be filled with NULL.
================================================================================ 
Q) What is normalization in databases?
Answer: Normalization is the process of organizing data to minimize redundancy and dependency. It involves dividing large tables into smaller, related tables and defining relationships to improve data integrity.
================================================================================ 
Q) What is the significance of indexes in a database?
Answer: Indexes speed up data retrieval operations by creating a data structure that allows quicker searches. They reduce the need to scan every row in a table, improving performance, especially with large datasets.
================================================================================ 
Q) How would you test the performance of SQL queries?
Answer:
•	Measure execution time using tools like SQL Profiler.
•	Analyze execution plans to identify bottlenecks.
•	Use indexing appropriately and avoid SELECT * queries.
•	Monitor resource consumption (CPU, memory) during query execution.
================================================================================ 
Q) Can you explain the ACID properties in database transactions?
Answer: The ACID properties ensure data integrity in a database:
•	Atomicity: A transaction is either fully completed or fully rolled back.
•	Consistency: Ensures that a transaction transitions the database from one valid state to another.
•	Isolation: Transactions are isolated from each other to avoid interference.
•	Durability: Once a transaction is committed, it remains permanent, even in case of a system failure.
================================================================================ 
Q) What is a primary key, and why is it important?
Answer: A primary key uniquely identifies each record in a table. It ensures that each row is distinct and prevents duplicates or NULL values in the primary key column(s).
================================================================================ 
Q) What is a foreign key, and how does it help maintain data integrity?
Answer: A foreign key is a column in one table that uniquely identifies a row in another table. It ensures referential integrity by preventing actions that would leave orphaned records in the related table.
================================================================================ 
Q) How do you perform data setup and teardown for tests in databases?
Answer:
•	Setup: Use INSERT statements to populate tables with test data.
•	Teardown: Use ROLLBACK for transactional consistency or DELETE statements to remove test data, ensuring the database returns to its original state post-test.
================================================================================ 
Q) What is the difference between DELETE, TRUNCATE, and DROP in SQL?
Answer:
•	DELETE: Removes rows from a table and can be rolled back if within a transaction.
•	TRUNCATE: Removes all rows and cannot be rolled back; faster than DELETE.
•	DROP: Deletes the entire table or database, including structure and data.
================================================================================ 
Q) What is a subquery, and when would you use it?
Answer: A subquery is a query within another SQL query. It is often used to retrieve data that will be used in the main query. Subqueries can be used in SELECT, INSERT, UPDATE, and DELETE operations for filtering data.
================================================================================ 
Q) What is the purpose of the GROUP BY and HAVING clauses in SQL?
Answer:
•	GROUP BY: Groups rows with the same values into summary rows, often used with aggregate functions like COUNT(), SUM(), etc.
•	HAVING: Filters the results of a GROUP BY clause, typically used to filter aggregate results (e.g., HAVING COUNT(*) > 5).
================================================================================ 
Q) What are SQL constraints, and why are they important?
Answer: SQL constraints enforce rules to maintain data integrity in a database:
•	PRIMARY KEY: Uniquely identifies records.
•	FOREIGN KEY: Enforces relationships between tables.
•	UNIQUE: Ensures all values in a column are distinct.
•	NOT NULL: Prevents NULL values in a column.
•	CHECK: Ensures values meet a specified condition.
================================================================================ 
Q) How do you test for data consistency after an UPDATE operation?
Answer: To test data consistency:
1.	Execute the UPDATE statement.
2.	Retrieve the updated data with a SELECT query.
3.	Assert that the data matches the expected changes.
Example:
UPDATE users SET email='new_email@example.com' WHERE user_id=1;
SELECT email FROM users WHERE user_id=1;
================================================================================ 
Q) What is the DISTINCT keyword used for in SQL?
Answer: The DISTINCT keyword removes duplicate rows from the result set, ensuring that only unique values are returned.
Example:
SELECT DISTINCT city FROM customers;
================================================================================ 
Q) How would you validate a foreign key constraint in a database?
Answer: To validate a foreign key constraint, attempt to insert data into the child table that violates the foreign key rule, ensuring that the database rejects it.
Example:
INSERT INTO orders (user_id) VALUES (999); -- Assuming '999' is an invalid user_id
================================================================================ 
Q) What is the purpose of the LIMIT clause in SQL queries?
Answer: The LIMIT clause restricts the number of rows returned by a query, commonly used for pagination or testing with smaller result sets.
Example:
SELECT * FROM employees LIMIT 10;
================================================================================ 
Q)  How do you ensure SQL queries are optimized for performance?
Answer:
•	Index frequently queried columns.
•	Avoid SELECT * and select only the necessary columns.
•	Analyze query execution plans to identify bottlenecks.
•	Use JOIN efficiently instead of multiple subqueries.
•	Avoid subqueries where JOIN or WITH statements are more efficient.
================================================================================ 
Q) How would you validate that a column contains unique values?
Answer: Run a GROUP BY query on the column and check if any group has more than one entry.
Example:
SELECT column_name, COUNT(*) 
FROM table_name 
GROUP BY column_name 
HAVING COUNT(*) > 1;
================================================================================ 
Q) How do you test data integrity using SQL?
Answer:
•	Verify primary keys are unique.
•	Ensure foreign key relationships are not broken.
•	Check that NOT NULL constraints are upheld.
•	Use CHECK constraints to ensure data adheres to business rules (e.g., age > 0).
================================================================================ 
Q) What is the difference between CHAR and VARCHAR data types?
Answer:
•	CHAR: Fixed length; occupies the same space regardless of the string length.
•	VARCHAR: Variable length; uses space only for the actual string length.
================================================================================ 
Q) What is the difference between COUNT(*) and COUNT(column_name)?
Answer:
•	COUNT(*): Counts all rows, including those with NULL values.
•	COUNT(column_name): Counts non-NULL values in the specified column.
================================================================================ 
2Q) How does GROUP BY work in SQL?
Answer: The GROUP BY clause groups rows with identical values into summary rows. It is used with aggregate functions like COUNT(), SUM(), and AVG() to aggregate data.
================================================================================ 
Q) Can you use WHERE with aggregate functions?
Answer: You cannot use WHERE directly with aggregate functions like COUNT() or SUM(). Instead, use HAVING to filter results after aggregation.
================================================================================ 
Q)  What is a subquery? How is it different from a JOIN?
Answer: A subquery is a query nested within another query, typically used for filtering or computing results. A JOIN combines rows from two or more tables based on a related column, while a subquery executes separately and may return a single value or set of values.
================================================================================ 
Q)  When would you use a correlated subquery?
Answer: A correlated subquery is used when the subquery depends on the outer query for its values. It is evaluated for each row processed by the outer query.
Example:
SELECT employee_id, salary
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
================================================================================ 
Q) How do you pivot rows into columns and vice versa in SQL?
Answer: To pivot rows into columns in SQL, you can use the PIVOT operator. Conversely, to pivot columns into rows, you can use the UNPIVOT operator. Both techniques are used for reshaping data.
Example:
To pivot rows into columns:
SELECT * 
FROM (SELECT product, month, sales FROM sales_data) AS source
PIVOT (
  SUM(sales) FOR month IN ([January], [February], [March])
) AS pvt;
================================================================================ 
Q) What is a correlated subquery and how is it different from a regular subquery?
Answer: A correlated subquery is a subquery that references columns from the outer query. It is evaluated once for each row processed by the outer query, whereas a regular subquery is independent and runs only once.
Example:
Correlated Subquery:
SELECT employee_id, salary
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
================================================================================ 
Q) How do you rank records within groups in SQL?
Answer: You can rank records within groups using the RANK(), DENSE_RANK(), or ROW_NUMBER() window functions.
Example:
SELECT department_id, employee_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank
FROM employees;
================================================================================ 
Q) What is the purpose of the COALESCE function?
Answer: The COALESCE function returns the first non-null value from a list of expressions.
Example:
SELECT COALESCE(phone_number, 'N/A') FROM customers;
================================================================================ 
Q) How do you write a query to get the second most recent record per user?
Answer: You can use a subquery or the ROW_NUMBER() window function to find the second most recent record.
Example:
WITH ranked AS (
  SELECT user_id, order_date, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY order_date DESC) AS rank
  FROM orders
)
SELECT user_id, order_date
FROM ranked
WHERE rank = 2;
================================================================================ 
Q) How do you detect and remove duplicate rows from a table?
Answer: You can detect duplicates by using GROUP BY or DISTINCT. To remove duplicates, you can use the DELETE statement with a CTE or subquery.
Example:
WITH CTE AS (
  SELECT id, ROW_NUMBER() OVER (PARTITION BY column1, column2 ORDER BY id) AS row_num
  FROM table_name
)
DELETE FROM CTE WHERE row_num > 1;
================================================================================ 
Q) What is the impact of indexing on query performance?
Answer: Indexes speed up query performance, especially for SELECT operations, by allowing faster searching and retrieval of data. However, they can slow down write operations (INSERT, UPDATE, DELETE) as the index must be updated.
Example:
CREATE INDEX idx_user_id ON users (user_id);
================================================================================ 
Q) How do you optimize a slow-performing SQL query?
Answer: To optimize a slow-performing query, consider adding indexes, reducing unnecessary joins, simplifying complex subqueries, using EXPLAIN to analyze query execution plans, or breaking the query into smaller parts.
Example:
EXPLAIN SELECT * FROM orders WHERE user_id = 1;
================================================================================ 
Q) What are the different types of joins in SQL, and when would you use each?
Answer:
•	INNER JOIN: Returns records with matching values in both tables.
•	LEFT JOIN: Returns all records from the left table and matched records from the right table.
•	RIGHT JOIN: Returns all records from the right table and matched records from the left table.
•	FULL JOIN: Returns records when there is a match in either table.
•	CROSS JOIN: Returns the Cartesian product of two tables.
Example:
SELECT a.name, b.department
FROM employees a
LEFT JOIN departments b ON a.department_id = b.department_id;
================================================================================ 
Q) How would you design a table schema for storing hierarchical data?
Answer: You can design a table using either the Adjacency List model, the Path Enumeration model, or the Closure Table model for hierarchical data.
Example (Adjacency List):
CREATE TABLE employees (
  employee_id INT PRIMARY KEY,
  name VARCHAR(100),
  manager_id INT,
  FOREIGN KEY (manager_id) REFERENCES employees(employee_id)
);
================================================================================ 
Q) How do you safely update large tables without locking issues?
Answer: You can update large tables in smaller batches to avoid locking issues. Also, consider using transaction isolation levels or optimistic locking.
Example:
UPDATE employees
SET salary = salary * 1.1
WHERE employee_id IN (SELECT employee_id FROM employees WHERE department_id = 1 LIMIT 100);
================================================================================ 
Q) What’s the difference between DELETE, TRUNCATE, and DROP?
Answer:
•	DELETE: Removes rows from a table, can be rolled back, and maintains table structure.
•	TRUNCATE: Removes all rows, cannot be rolled back, faster than DELETE.
•	DROP: Removes the entire table or database, including structure and data.
Example:
DELETE FROM employees WHERE employee_id = 10;
================================================================================ 
Q)  How do you write a recursive CTE to navigate parent-child relationships?
Answer: You can use a recursive Common Table Expression (CTE) to query hierarchical data such as organization charts.
Example:
WITH RECURSIVE org_chart AS (
  SELECT employee_id, manager_id, name
  FROM employees
  WHERE manager_id IS NULL
  UNION ALL
  SELECT e.employee_id, e.manager_id, e.name
  FROM employees e
  INNER JOIN org_chart o ON e.manager_id = o.employee_id
)
SELECT * FROM org_chart;
================================================================================ 
Q) What is the difference between UNION and UNION ALL?
Answer:
•	UNION: Combines results from two queries, removing duplicates.
•	UNION ALL: Combines results from two queries, including duplicates.
Example:
SELECT name FROM customers
UNION ALL
SELECT name FROM suppliers;
================================================================================ 
Q) How do you perform time-based partitioning in a SQL database?
Answer: Time-based partitioning involves splitting a large table into partitions based on time intervals, such as by year or month.
Example:
CREATE TABLE sales (
  sale_id INT,
  sale_date DATE,
  amount DECIMAL(10,2)
)
PARTITION BY RANGE (YEAR(sale_date)) (
  PARTITION p2019 VALUES LESS THAN (2020),
  PARTITION p2020 VALUES LESS THAN (2021)
);
================================================================================ 
Q)  How do you implement data auditing or change tracking using SQL?
Answer: You can implement data auditing using triggers to capture changes (INSERT, UPDATE, DELETE) and store the changes in an audit table.
Example:
CREATE TRIGGER audit_trigger
AFTER UPDATE ON employees
FOR EACH ROW
INSERT INTO audit_log (action, old_value, new_value, updated_at)
VALUES ('UPDATE', OLD.salary, NEW.salary, NOW());
================================================================================ 
Q) What is the difference between a materialized view and a regular view?
Answer:
•	Regular View: A virtual table that is not stored but derived from a query when accessed.
•	Materialized View: A physical copy of the query result stored in the database, refreshed periodically.
Example:
CREATE MATERIALIZED VIEW sales_summary AS
SELECT product_id, SUM(amount)
FROM sales
GROUP BY product_id;
================================================================================ 
Q) How do you calculate running totals in SQL?
Answer: You can calculate running totals using the SUM() function along with the OVER() clause.
Example:
SELECT order_id, order_date, amount,
       SUM(amount) OVER (ORDER BY order_date) AS running_total
FROM orders;
================================================================================ 
Q) How do you prevent SQL injection attacks in your queries?
Answer: You can prevent SQL injection by using parameterized queries or prepared statements.
Example:
PREPARE stmt FROM 'SELECT * FROM users WHERE username = ?';
EXECUTE stmt USING @username;
================================================================================ 
Q) How would you design a transaction-safe update across multiple tables?
Answer: You can use transactions (BEGIN, COMMIT, ROLLBACK) to ensure that updates across multiple tables are atomic.
Example:
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT;


