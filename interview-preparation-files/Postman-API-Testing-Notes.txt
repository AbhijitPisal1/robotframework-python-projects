
````Postman API Testing Notes````

================================================================================
Q)  What is an API?
Ans) Application Programming Interface (API) is useful for communication between different software systems.
    It acts as an interface between two applications and allows two software systems to communicate with one another.
    It is a collection of functions that can be executed by another software program.
    It takes the request from the user and gives the response without exposing the internal details.
================================================================================
Q) How do APIs work?
Ans) APIs (Application Programming Interfaces) act as a bridge between two software systems. When a client (like a web or mobile app) sends a request to an API — usually over HTTP — the API processes the request, communicates with the server or database, and sends back a response, often in JSON or XML format.
For example, when you log into an app, it sends your credentials to an API, which checks them on the server and returns a success or error response
================================================================================
Q) What are the different test cases of API testing?
Ans) Common test cases in API testing include:
    Functionality Testing – Verify that the API works as expected and returns correct data in the right format.
    Performance Testing – Check response time, speed, and stability under load.
    Security Testing – Ensure data protection, proper authentication, and no unauthorized access.
    Error Handling – Validate how the API handles exceptions, timeouts, and invalid inputs.
    Data Validation – Ensure accuracy of returned data, correct HTTP status codes, and proper authorization behavior.
================================================================================
Q) Mention common HTTP methods used in API testing.
Ans)
    POST: It is used to create new data or resources on an API.
    GET: It is used to retrieve data or resources from an API.
    PUT: It is used to update existing data or resources on an API.
    PATCH: It is used to update existing data or resources from an API partially.
    DELETE: It is used to delete data or resources from an API.
    HEAD: It is used to retrieve only the headers of a response without the body, useful for checking resource existence.
    OPTIONS: It describes the communication options for a target resource, typically to identify supported HTTP methods.
    CONNECT: It is used to establish a tunnel to the server, generally for proxy connections.
    TRACE: It is used to test and diagnose the path taken by a request to the server by reflecting back the received request.
================================================================================
Q) What is the role of headers in API testing?
Ans) Headers in API testing carry important metadata about the request or response. They are used to:
    - Pass authentication tokens (e.g., Authorization header)
    - Define content type (e.g., Content-Type: application/json)
    - Control caching, language, or request behavior
    - Specify client information or custom data
Headers help the server understand how to process the request correctly and securely
================================================================================
Q) What is the purpose of authentication in API testing?
Ans) Authentication in API testing ensures that only authorized users can access the API. It verifies the identity of the requester before allowing access to protected resources. Common methods include:
    - Basic Auth : Username and password in headers, Basic Auth sends your username and password every request
    - Bearer Token : Token passed in headers (e.g., $Authorization: Bearer your_token$), Bearer Token is like a session token after login—you don’t send credentials every time
    - API Key : Key sent in headers or query params,API Key is a permanent key tied to an app or server for accessing APIs.
================================================================================
Q) What is the purpose of HTTP status codes in API testing?
Ans) HTTP status codes indicate whether a specific request successfully completed or not. These are embedded in the HTTP header of a page to tell the browser the result of its request.
================================================================================
Q) What is the purpose of the request and response body in API testing?
Ans) The request body is used to send and receive data such as input parameters, or data to create/ update resources via the REST API. 
The response body is the data API send to the client.
================================================================================
Q) What is the purpose of the request and response headers in API testing?
Ans) The request headers are used to specify a content type, caching, authentication, etc. 
The response header can provide information about the server, caching, etc.
================================================================================
Q) What are the different types of error responses in API testing?
Ans) In API testing, error responses help identify issues with requests or server behavior. Common types include:
    - Validation Errors – Occur when the input data fails validation rules (e.g., missing required fields, invalid formats).
    - HTTP Status Code Errors – Standard error codes such as:
        4xx: Client-side errors (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found)
        5xx: Server-side errors (e.g., 500 Internal Server Error, 503 Service Unavailable)
    - Custom Error Messages – API-specific error messages that give more detailed info about what went wrong (e.g., "User not found", "Invalid API key").
These error types help developers debug and improve the reliability of the API.
================================================================================
Q) Explain the differences between GET and POST methods in API testing.
Ans) In API testing, the GET and POST methods are used to send requests to a server, but they serve different purposes:

1. GET Method:
    Used to retrieve data from the server.
    Sends data as query parameters in the URL.
    Data is visible and limited in size.
    It is idempotent – repeated requests return the same result.
    Components: URL, query parameters, headers, and response (usually JSON).

2. POST Method:
    Used to send data to the server to create or update resources.
    Sends data in the request body.
    Data is hidden from the URL and supports larger payloads.
    It is not idempotent – repeated requests may create duplicates.
    Components: URL, request body (usually JSON), headers, and response.

In summary, GET focuses on sending data via the URL and retrieving information and POST sends larger amounts of data in the body to create or update resources.
================================================================================
Q) What format to use for assertions in API tests?
Ans) Use assertions to check whether the actual outcome matches the expected outcome.
Here are some common formats for assertions:
1. Equality Checks: To check if two values are equal.
	Example: assert response.status_code == 200
	
2. Containment Checks: To verify if a response contains a specific value.
	Example: assert "user" in response.json()

3. Boolean Checks: To validate that a condition is true.
	Example: assert response.ok

4. List or Dictionary Checks: To ensure a list or dictionary has expected items.
	Example: assert response.json()["name"] == "John"
================================================================================
Q) Provide the syntax for query parameters in API requests.
Ans) The syntax for query parameters in API requests is to append them to the URL after a question mark (?) and separate multiple parameters with an ampersand (&). Each parameter consists of a key-value pair, formatted as key=value.
    Example Syntax: https://api.example.com/users?id=1&name=John
================================================================================
Q) In Postman, how to delete a variable after test execution is finished?
Ans) In Postman, you can delete a variable after test execution using pm.environment.unset (for environment variables) or pm.collectionVariables.unset (for collection variables).
Place the code in the Tests tab:
    // To delete an environment variable
    pm.environment.unset("variable_name");
    // To delete a collection variable
    pm.collectionVariables.unset("variable_name");
================================================================================ 
Q) What are the different types of variables in Postman, and how does Postman handle variable scopes?
Ans: Postman supports multiple variable scopes to help manage data efficiently across requests:
1. Global Variables: Available across all environments and collections. Use these for values that remain constant in all tests, like a common username or token.
2. Environment Variables: Scoped to a specific environment (e.g., Development, Testing, Production). Useful for environment-specific values like base URLs or API keys.
3. Collection Variables: Scoped to a particular collection. Ideal for values shared only within that collection, helping keep related requests organized.
4.Local Variables: Limited to the lifetime of a single request or script execution. Useful for temporary data within a request.

Variable resolution priority: When Postman looks up a variable, it checks in this order: Local > Collection > Environment > Global. The first match found is used.
================================================================================
Q) What is input validation?
Ans) It is the Process of analyzing the inputs and preventing malicious data from entering the system. It ensures that all input data in API requests are properly sanitized and validated to prevent injection attacks.
================================================================================
Q) What is Latency in API testing?
Ans) Latency in API testing is how long it takes for the request to reach the server. The shorter the response time, the better the user experience.
================================================================================
Q) How would you mock an API response when the backend isn’t ready?
Ans.) When the backend isn’t ready, you can mock API responses to continue frontend or integration testing using tools like:
    Postman Mock Server: Create mock endpoints with example JSON responses.
    WireMock: Simulate HTTP endpoints locally or in dev environments.
    Swagger/OpenAPI: Auto-generate mock servers from API specifications.
Example (Postman):
    1. Create a mock server in Postman.
    2. Define endpoint/users with sample response {"id":1,"name":"John"}.
    3. Use mock server URL in your tests until backend is live.
==================================================
Q) What is Postman, and why is it used?
Ans.) Postman is an API development tool that helps users create, send, and test HTTP requests. It simplifies the process of API testing and allows for easy collaboration among team members.
================================================================================
Q) How do you create a request in Postman?
Ans.) To create a request, open Postman, select the request type (GET, POST, etc.), enter the URL, and add any headers or body data as needed. Then, click the "Send" button to execute the request.
================================================================================
Q) What are Collections in Postman?
Ans.) Collections are groups of requests that can be organized for better management. They allow users to save APIs, organize requests, and share them with team members easily.
================================================================================
Q) How can you handle environment variables in Postman?
Ans.) Environment variables can be created to store values like API keys or endpoint URLs. They can be set under the "Manage Environments" option and can be referenced using the syntax {{variableName}} in requests.
================================================================================
Q) What are Tests in Postman?
Ans.) Tests are JavaScript code snippets that run after a request is sent to validate the response. They can check for response status, response time, headers, cookies, and specific data in the response body.
================================================================================
Q) Write a test script in Postman to check if the status code is 200.
Ans.)
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
================================================================================
Q) Write a test to check if a response header contains Content-Type as application/json.
Ans.)
pm.test("Content-Type is application/json", function () {
    pm.response.to.have.header("Content-Type", "application/json");
});
================================================================================
Q) Write a test in Postman to check if the response time is under 500ms.
Ans.)
pm.test("Response time is less than 500ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(500);
});
================================================================================
Q) How do you check if a JSON response contains a specific key-value pair?
Ans.)
pm.test("Response has correct key-value", function () {
    let jsonData = pm.response.json();
    pm.expect(jsonData.key).to.eql("value");
});
================================================================================
Q) What is the Collection Runner in Postman?
Ans.) The Collection Runner allows users to run all requests in a collection sequentially. It is useful for testing multiple APIs and can be configured to run with different environments and data sets.
================================================================================
Q) Can you explain the difference between Pre-request Scripts and Tests in Postman?
Ans.) Pre-request Scripts are code snippets that run before a request is sent, allowing you to set up variables or conditions. Tests run after the response is received to validate outcomes based on the response data.
================================================================================
Q) What is Newman, and how is it related to Postman?
Ans.) Newman is a command-line tool that allows users to run Postman collections directly from the CLI. It is useful for integrating Postman tests in CI/CD pipelines to automate API testing.
================================================================================
Q) How can you run a Postman collection from the CLI using Newman?
Ans.) You can run a Postman collection from the CLI using Newman like this:
	newman run collection.json -e environment.json -r cli,html
    where, collection.json → Your Postman collection file.
           -e environment.json → (Optional) Specify an environment file.
           -r cli,html → Generate reports in CLI and HTML formats.
This executes the collection with the given environment and produces results in both CLI and HTML outputs.
================================================================================
Q) How can you integrate Postman tests with a CI/CD pipeline?
Ans.) You can integrate Postman tests in CI/CD by using Newman, the command-line tool for Postman. You install Newman on your pipeline agent and run your Postman collections as part of the build or deployment process.
================================================================================
Q) How can we save API responses to a file in Postman?
Ans.)API responses can be saved by using Newman’s export feature:
	newman run collection.json -r json --reporter-json-export output.json
This saves the test results including responses to a JSON file.
================================================================================
Q) How can you run Postman requests in parallel?
Ans.) Postman GUI does not support true parallel execution, but you can achieve it using Newman with third-party tools like `newman-parallel` or by writing custom Node.js scripts with Promise.all.
================================================================================
Q) Write a Pre-request Script to set a random token before each request.
Ans.) pm.environment.set("token", Math.random().toString(36).substring(2));
================================================================================
Q) List of all methods of pm. object
Ans.) In Postman, the `pm` object provides several methods and properties that are useful for testing and manipulating requests and responses. Here is a list of important `pm` methods:
1. pm.response: Accesses the response object, allowing you to inspect the response properties.
   Example: pm.response.json() retrieves the response body as JSON.

2. pm.test: Used to define a test case and validates conditions on the response.
   Example: pm.test("Status code is 200", function () { pm.response.to.have.status(200); });

3. pm.request: Accesses the request object, allowing inspection of request details (headers, body, etc.).
   Example: pm.request.url retrieves the URL of the current request.

4. pm.environment: Provides methods to manage environment variables.
   Example: pm.environment.set("token", "yourtokenhere"); sets an environment variable.

5. pm.collectionVariables: Used to manage collection-level variables.
   Example: pm.collectionVariables.get("variable_name"); retrieves a collection variable.

6. pm.globals: Accesses global variables in Postman.
   Example: pm.globals.set("globalVariable", "value"); sets a global variable.
================================================================================