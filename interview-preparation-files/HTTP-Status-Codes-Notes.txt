
```` HTTP API Status Codes Reference Sheet ````

====================================================================================================
Q) What is an API status code and what are its benefits ?
Ans.)
	An API status code is a 3-digit number returned by the server that tells you if a request succeeded, failed, or needs action. It helps quickly spot whether an issue is on the client side, server side, or if everything worked.
Why it’s useful:
    - Speeds up debugging
    - Gives quick feedback on API behavior
    - Helps automate test validations and error handling
====================================================================================================
Q) What are different types of status codes ?
Ans.) 
-- 5 Types of HTTP Status Codes
1xx - Informational Responses:
-> Indicate that the request was received and understood. However, no action is required at this stage 
-> Communicates transfer protocol-level information.
    100 Continue: The server has received the request headers, and client should proceed to send the request body.
    101 Switch : The requester has asked the server to switch protocols and the server has agreed.
    103 Early hints : Return some response headers before final message

2xx - Successful Responses :
-> The request was successfully received, understood, and accepted.
    200 OK: The request was successful, and the server returned the requested resource.
    201 Created: The request has been fulfilled, and a new resource was created as a result.
    202 Accepted: The request has been accepted for processing, but the processing is not complete.
    204 NO content : Server processed requested successfully but no content is returned.

""" The request was successful, a new resource was created, the request is accepted, or there's no content to return"""

3xx - Redirection Messages :
-> Indicates that the client must take some additional action in order to complete their request.
    301 Moved Permanently: The requested resource has been permanently moved to a new URL.
    302 Found: The resource you requested is temporarily located at a different URL.
    304 Not Modified: The requested resource has not been modified since the last request.

""" The resource has moved permanently, is found at temporary location, or hasn't been modified """

4xx - Client Error Responses :
-> Indicate that the client’s request contains incorrect syntax or cannot be fulfilled.
    400 Bad Request: The server cannot process the request due to a client error/incorrect request.
    401 Unauthorized: Authentication is required, and it has failed authenticate or has not yet been provided authorization details.
    403 Forbidden: The server understands the request but refuses to authorize it.  i.e., the user does not have the necessary permissions for the resource
    404 Not Found: The server cannot find the requested resource.
    405 Method Not Allowed : The request HTTP method has been disabled and cannot be used for that resource

""" You sent an incorrect request, you're not authenticated, you're not authorized, you're looking for the wrong product, or you're performing the wrong action."""

5xx - Server Error Responses :
-> Signify that the server failed to fulfill a valid request.
    500 Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request.
    501 Not Implemented: The HTTP method is not supported by the server and cannot be handled.
    502 Bad Gateway: The server, acting as a gateway or proxy, received an invalid response from the upstream server.
    503 Service Unavailable: The server is currently unable to handle the request due to temporary overload or maintenance.
    
"The server encountered an issue, server doesn’t support the method, server got a bad response from another server, or server is temporarily unavailable"
==================================================
Q) Explain how to Troubleshoot API Status Codes
Ans.)
400 - Bad Request:
    - Check your request format: Ensure that your API request is well-formed (correct headers, body format, parameters).
    - Check for malformed JSON or XML: If you're sending data in JSON/XML, validate its structure.
    - Inspect the request body: It could be missing required fields or sending incorrect data types.

401 - Unauthorized:
    - Verify authentication credentials: Check if the correct API keys, tokens, or credentials are being passed.
    - Check token expiration: If you are using OAuth tokens or JWTs, ensure the token hasn’t expired.
    - Confirm authorization method: Ensure you're using the correct method (Bearer Token, Basic Auth, etc.) to send credentials.

403 - Forbidden:
    - Check user permissions: Make sure the API key or user has the necessary access rights for the resource you're trying to access.
    - Verify the resource's access control settings: For example, if you're accessing a file, ensure it has the correct read/write permissions.

404 - Not Found:
    - Check the URL: Ensure the URL path, query parameters, and resource names are correct.
    - Confirm that the resource exists: Sometimes the resource may have been moved or deleted. Check if the endpoint is still valid.
    - Check API documentation: Ensure the endpoint you're trying to access is defined in the API.

405 - Method Not Allowed:
    - Check the HTTP method: Confirm that the method you're using is supported for the resource. For example, you may be trying to DELETE a resource that only supports GET.
    - Verify API documentation: Ensure you're using the correct HTTP method for the endpoint.
    - Check server-side configuration: There may be server-side restrictions on which HTTP methods are allowed.

500 - Internal Server Error:
    - Check the server logs: This could be a general error. Look at server-side logs for more detailed information on the failure.
    - Server overload: The server may be overwhelmed with requests. If that's the case, it might need to handle more requests or optimize performance.
    - Check server configuration: There could be misconfigurations in the server settings or issues with the server's runtime environment.

501 - Not Implemented:
    - Check the method: Review the API documentation to confirm the server supports the HTTP method you're using.
    - Ensure the server supports the feature: If you are using a newer feature or method, ensure that it is implemented and supported by the server.

502 - Bad Gateway:
    - Check upstream server: Ensure the upstream server that the gateway is calling is functioning properly.
    - Verify network connectivity: If there's an issue with the network or the server's connectivity to the upstream server, it could cause a bad gateway error.
    - Check server logs: Detailed logs on the gateway server may show why it couldn't communicate properly with the upstream server.

503 - Service Unavailable:
    - Check server status: The server might be undergoing maintenance or experiencing high traffic. You can verify the status of the service with your hosting provider or check the system’s uptime.
    - Retry the request: If the server is temporarily unavailable, you can retry the request after a few seconds or minutes.
    - Monitor server performance: Ensure the server has enough resources (CPU, memory) to handle incoming requests.
=============================================
Q) How do you handle different status codes in API automation reports?
Ans.)
    - Group responses in test reports: Success (2xx), Client Errors (4xx), Server Errors (5xx).
    - Highlight unexpected status codes as failures.
    - Log complete request & response details for failed calls.
==================================================
Q) What status code would you expect for DELETE on a non-existing resource?
Ans.)
The API may return:
    404 Not Found → Resource doesn’t exist.
Or 204 No Content → If the API treats DELETE as idempotent (doesn’t care if resource existed).
Key point:
     According to REST principles, DELETE should be idempotent. So multiple DELETE calls shouldn’t fail even if resource is already gone.
==================================================
