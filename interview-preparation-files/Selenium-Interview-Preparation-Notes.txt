
```` Selenium Interview Preparation Notes ````

----------------------------------------------------------------------
Q: What is Selenium?
Answer:
Selenium is an open-source tool used for automating web applications for testing purposes. It automates browser actions, simulates user interactions, and supports multiple browsers and programming languages, making it widely used in automated testing.
----------------------------------------------------------------------
Q: How does Selenium architecture work?
Answer:
Selenium WebDriver operates with a Client-Server architecture. The client (test script) sends commands to the server (WebDriver) using the W3C Protocol. WebDriver then communicates with the browser driver (like ChromeDriver, GeckoDriver) to execute commands on the browser, sending back results to the client.

. Difference between Selenium 3 and Selenium 4?  
   - Selenium 4 introduces several enhancements:
     - Support for W3C WebDriver standard.
     - Improved browser compatibility.
     - Enhanced support for grid (Selenium Grid 4).
     - New APIs like relative locators.
     - Chrome DevTools integration for better control.
   - Selenium 3 is based on the legacy WebDriver and doesn’t have some of these newer features.
----------------------------------------------------------------------

Q: What is the structure of Selenium?
Answer:
Selenium consists of the following components:
1.	Selenium WebDriver: Automates browser actions.
2.	Selenium IDE: Record and playback tool.
3.	Selenium Grid: Enables parallel test execution on different machines.
4.	Selenium Remote Server: Distributes test execution across environments.
5.	Language Bindings: Supports various languages (Java, Python, C#, etc.).
----------------------------------------------------------------------
Q: What are the advantages of using Selenium?
Answer:
•	Open Source: Free to use, with strong community support.
•	Cross-Browser Compatibility: Supports all major browsers.
•	Multiple Language Support: Java, Python, C#, and others.
•	Integration: Works with frameworks like TestNG, JUnit, etc.
•	Parallel Testing: Selenium Grid allows tests to run concurrently across different browsers and machines.
----------------------------------------------------------------------
Q: What are the different types of locators in Selenium?
Answer:
Locators are methods used by Selenium to find and interact with elements on a web page. 
Different types of locators help identify elements uniquely or broadly based on their attributes or position.

Common Selenium Locators:
1. ID
    Uses the element’s unique id attribute.
    Fastest and most reliable locator if the ID is unique.
    ex: driver.findElement(By.id("elementId"))
2. Name
    Uses the element’s name attribute.
    Useful if id is not available.
    ex: driver.findElement(By.name("elementName"))
3. Class Name
    Uses the CSS class attribute of elements.
    Can match multiple elements, so use carefully.
    ex: driver.findElement(By.className("className"))
4. Tag Name
    Finds elements by their HTML tag (e.g., input, button).
    Useful for bulk operations or broad selection.
    ex: driver.findElement(By.tagName("tagName"))
5.Link Text
    Matches a link (<a>) by its exact visible text.
    Used to locate hyperlinks.
    ex: driver.findElement(By.linkText("linkText"))
6.Partial Link Text
    Matches links by partial text.
    Useful when exact link text is long or dynamic.
    ex: driver.findElement(By.partialLinkText("partialText"))
7.CSS Selector
    Uses CSS syntax to locate elements via IDs, classes, attributes, and hierarchy.
    Powerful and flexible.
    ex: driver.findElement(By.cssSelector("cssSelector"))
8.XPath
    Uses XML path language to navigate and locate elements.
    Most powerful and flexible locator, can select elements based on complex conditions and hierarchy.
    ex: driver.findElement(By.xpath("xpathExpression"))
----------------------------------------------------------------------
Q: What is the difference between findElement() and findElements()?
Answer:
•	findElement(): Returns the first matching element; throws NoSuchElementException if not found.
•	findElements(): Returns a list of matching elements; returns an empty list if no elements are found.
----------------------------------------------------------------------
Q: How do you handle dynamic web elements in Selenium?
Answer:
•	Waits: Use conditions like waitUntilElementVisible() to ensure the element is ready before interacting.
•	JavaScript Execution: If elements are dynamic, use JavaScript to interact.
•	Dynamic Locators: Use relative XPath or CSS selectors that adapt to changes in element attributes.
----------------------------------------------------------------------
Q: How do you handle alerts and pop-up windows in Selenium?
Answer:
•	Switch to alert: driver.switchTo().alert()
•	Accept alert: alert.accept()
•	Dismiss alert: alert.dismiss()
•	Get alert text: alert.getText()
•	Prompt alert: Use alert.sendKeys() to input text into prompt dialogs.
----------------------------------------------------------------------
Q: How do you perform mouse actions in Selenium?
Answer:
Use the Actions class to perform mouse gestures like hovering, clicking, double-clicking, and drag-and-drop. 
Example:
Actions actions = new Actions(driver);
actions.moveToElement(driver.findElement(By.id("elementId"))).perform();
----------------------------------------------------------------------
Q: How do you handle file uploads in Selenium?
Answer:
For file uploads, use the sendKeys() method to interact directly with <input type="file"> elements:
WebElement uploadButton = driver.findElement(By.id("fileUpload"));
uploadButton.sendKeys("C:\\path\\to\\file.png");
----------------------------------------------------------------------
Q: How do you handle iframes in Selenium?
Answer:
Switch to an iframe using:
driver.switchTo().frame("frameName");  // By name or ID
driver.switchTo().frame(0);            // By index
After performing actions, switch back to the main content:
driver.switchTo().defaultContent();
----------------------------------------------------------------------
Q: How do you take a screenshot in Selenium?
Answer:
Use the TakesScreenshot interface:
File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
FileUtils.copyFile(screenshot, new File("path/to/screenshot.png"));
----------------------------------------------------------------------
Q: How would you handle Selenium exceptions?
Answer:
Handle exceptions using try-catch blocks, retries with explicit waits, and logging for debugging. Common exceptions include NoSuchElementException, TimeoutException, and StaleElementReferenceException.
----------------------------------------------------------------------
Q: How do you perform cross-browser testing in Selenium?
Answer:
Use different WebDriver implementations for each browser (e.g., ChromeDriver, FirefoxDriver) to perform tests across browsers. Selenium Grid also enables parallel test execution on different machines and browsers.
----------------------------------------------------------------------
Q: How do you implement a data-driven framework in Selenium?
Answer:
Store test data in external files (e.g., CSV, Excel) and use libraries (like Apache POI) to read data. Loop through the data using a @DataProvider or other data-driven techniques to run the tests with different input values.
----------------------------------------------------------------------
Q: How do you maximize the browser window in Selenium?
Answer:
Use the following code to maximize the browser window:
driver.manage().window().maximize();
----------------------------------------------------------------------
Q: Relative locators in Selenium
Answer:
Locate elements based on their position relative to others using methods like above(), below(), toLeftOf(), toRightOf(), near().
----------------------------------------------------------------------
Q: Element click intercepted exception and how to fix
Answer:
•	Occurs when an element is obscured by another element (e.g., overlay).
•	Fix:
1.	Use explicit waits for visibility.
2.	Scroll into view.
3.	Close overlays.
4.	Use JavaScript click:
5.	((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
----------------------------------------------------------------------
Q: Difference between checked and unchecked exceptions
Answer:
•	Checked Exceptions: Must be handled or declared (e.g., IOException).
•	Unchecked Exceptions: Do not require handling (e.g., NullPointerException).
----------------------------------------------------------------------
Q: Can you explain how to get values from a .properties file for configuration in Java?
Answer:
To read values from a .properties file in Java, follow these steps:
1.	Create a Properties object.
2.	Use a FileInputStream to open the .properties file.
3.	Load the file using the .load() method.
4.	Retrieve the value by calling .getProperty() with the key (e.g., browser or url).
This method helps externalize configuration, allowing easy modification of settings without changing the code.
----------------------------------------------------------------------
Q: How would you provide test data from a local .xlsx or .xls file into a TestNG test script?
Answer:
You can provide data using TestNG's @DataProvider. To read data from an Excel file:
1.	Use Apache POI to open the file with a FileInputStream.
2.	Load the workbook using XSSFWorkbook for .xlsx files or HSSFWorkbook for .xls files.
3.	Access the sheet (XSSFSheet) and loop through its rows.
4.	Return the data in the form of an Object[][] array for TestNG to pass into the test method.
The @DataProvider will then supply the test data for each test method.
----------------------------------------------------------------------
Q: How do you handle synchronization in Selenium?
Answer:
Selenium provides three types of synchronization to ensure that scripts wait for elements to load or meet certain conditions:
1.	Implicit Wait: Set a default time for Selenium to wait for elements (e.g., driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));).
2.	Explicit Wait: Wait for a specific condition to be true for an element (e.g., WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); wait.until(ExpectedConditions.elementToBeClickable(element));).
3.	Fluent Wait: Similar to Explicit Wait but with more flexibility, such as polling at intervals.
Synchronization is crucial for dynamic web pages where elements might take time to appear.
----------------------------------------------------------------------
Q: What are the different exceptions in Selenium WebDriver?
A: Some common exceptions include:

1. NoSuchElementException : Thrown when an element cannot be found on the page using the given locator.
2. TimeoutException : Occurs when a command does not complete in the specified time, e.g., waiting for an element to appear.
3. StaleElementReferenceException : Happens when the element being interacted with is no longer attached to the DOM (e.g., page refreshed or DOM updated).
4. ElementNotInteractableException : Thrown when an element is present but cannot be interacted with (e.g., hidden or disabled).
6. NoSuchFrameException : When the specified frame or iframe is not found.
7. NoSuchWindowException : When the window or tab specified is not found.
8. InvalidSelectorException : When the locator syntax is incorrect or not supported.
9. WebDriverException : Generic exception when the WebDriver fails or encounters an unexpected error.
10. SessionNotCreatedException : When a new browser session cannot be created, often due to version incompatibilities.
11. JavascriptException : When an error occurs during JavaScript execution.
----------------------------------------------------------------------
Q: How do you handle Selenium exceptions in Robot Framework?
Answer:
You can handle Selenium exceptions in Robot Framework using:
1.	Run Keyword And Ignore Error: Continues execution even if an error occurs.
2.	Run Keyword If: Checks the error status and handles it accordingly.
3.	Log: Logs errors for debugging purposes.
----------------------------------------------------------------------
Q: How do you handle closing the second window in Selenium?
Answer:
To close the second window in Selenium:
1.	Get the handle of the main window using driver.getWindowHandle().
2.	Loop through all window handles with driver.getWindowHandles() and switch to the second window.
3.	Close the second window with driver.close().
4.	Switch back to the main window using driver.switchTo().window(mainWindow).
This allows you to manage multiple windows during automation.
----------------------------------------------------------------------
Q: How do you handle dropdowns in Selenium?  
Answer:
   To handle dropdowns, Selenium provides the Select class:
   Select dropdown = new Select(driver.findElement(By.id("dropdown")));
   dropdown.selectByVisibleText("Option1");
   dropdown.selectByIndex(2);
   dropdown.selectByValue("optionValue");
----------------------------------------------------------------------
Q: How to handle multiple windows in Selenium?  
Answer:
   You can switch between multiple browser windows using window handles:
   String parentWindow = driver.getWindowHandle();
   Set<String> allWindows = driver.getWindowHandles();
   for (String window : allWindows) {
       if (!window.equals(parentWindow)) {
           driver.switchTo().window(window);
       }
   }
----------------------------------------------------------------------
Q: What is the difference between get() and navigate().to()?  
Answer:
   - get(): Used to open a URL. It waits for the page to load before returning control.
   - navigate().to(): Used to navigate to a URL, but it doesn’t wait for the page to load in the same way get() does. It allows for backward and forward navigation as well.
----------------------------------------------------------------------
Q: What is the difference between driver.quit() and driver.close()?  
Answer:
    - driver.quit(): Closes all the browser windows opened by the WebDriver session and ends the session.
    - driver.close(): Closes the current browser window. If multiple windows are open, it closes only the current window.
----------------------------------------------------------------------
Q: How do you handle 'StaleElement ReferenceException'?  
Answer:
    The StaleElementReferenceException occurs when an element is no longer attached to the DOM. To handle it:
    
    try {
        element = driver.findElement(By.id("element"));
    } catch (StaleElementReferenceException e) {
        // Retry finding the element
    }
----------------------------------------------------------------------
Q: What is JavaScriptExecutor? How do you use it?  
Answer:
    JavaScriptExecutor is used to execute JavaScript in the context of the current browser. Example usage:
    
    JavascriptExecutor js = (JavascriptExecutor) driver;
    js.executeScript("window.scrollBy(0,500)");
----------------------------------------------------------------------
Q: How do you scroll a webpage using Selenium?  
Answer:
    You can scroll using JavaScript:
    
    JavascriptExecutor js = (JavascriptExecutor) driver;
    js.executeScript("window.scrollBy(0,500)");
----------------------------------------------------------------------
Q: How do you validate broken links in Selenium? 
Answer: 
    Check for HTTP status codes using HTTP requests or use a library like HttpURLConnection in Java to validate the links.
----------------------------------------------------------------------
Q: How do you capture network logs in Selenium?  
Answer:
    Use Chrome DevTools to capture network logs:
    
    ChromeOptions options = new ChromeOptions();
    options.setExperimentalOption("w3c", false);
    options.setCapability("goog:loggingPrefs", new HashMap<String, String>() {{
        put("browser", "ALL");
    }});
    WebDriver driver = new ChromeDriver(options);
----------------------------------------------------------------------
Q: What are different exceptions you faced while working in the framework?  
Answer:
    Common exceptions include:
    - NoSuchElementException: When an element is not found.
    - TimeoutException: When the specified wait time expires.
    - ElementNotVisibleException: When the element is not visible.
    - StaleElementReferenceException: When the element is no longer in the DOM.
----------------------------------------------------------------------
Q: What is the role of Desired capabilities in Selenium? 
Answer: 
    Desired capabilities allow you to configure WebDriver properties like browser type, version, and operating system to customize the WebDriver’s behavior.
----------------------------------------------------------------------
Q: What are the different types of Assertions used in Selenium? 
Answer: 
    - Assert.assertEquals(expected, actual): Verifies if two values are equal.
    - Assert.assertTrue(condition): Verifies if the condition is true.
    - Assert.assertFalse(condition): Verifies if the condition is false.
    - Assert.assertNull(object): Verifies if the object is null.
    - Assert.assertNotNull(object): Verifies if the object is not null.
----------------------------------------------------------------------
Q: What are the limitations of Selenium WebDriver?
Answer:  
    - Cannot handle desktop applications.
    - Limited support for handling CAPTCHAs.
    - Limited support for browser-based pop-ups.
    - No built-in reporting features.
----------------------------------------------------------------------
Q: How do you run Selenium tests in headless mode?  
Answer:
    You can run tests in headless mode by configuring the browser with headless options, for example:
    java
    ChromeOptions options = new ChromeOptions();
    options.addArguments("--headless");
    WebDriver driver = new ChromeDriver(options);
----------------------------------------------------------------------
Q: How do you handle CAPTCHA in Selenium? is it Possible?  
Answer:
    Handling CAPTCHA is difficult since it's designed to prevent automation. You could use services like 2Captcha or AntiCaptcha to solve CAPTCHAs if needed.
----------------------------------------------------------------------
Q: What are Globs in Selenium, and how are they used?
Answer::
    Globs are a simplified pattern matching syntax commonly used in Selenium IDE for matching strings with wildcard characters. 
    They allow testers to specify patterns to match elements, text, or attributes without needing complex regular expressions.

The key wildcard characters in glob syntax include:
    * — matches zero or more characters
    ? — matches exactly one character
    [] — matches any one character from the set inside the brackets

For example, the glob pattern button_* would match any string starting with "button_" like "button_1", "button_submit", etc.

Use cases:
    Globs are useful when the exact string may vary slightly, such as dynamic IDs or text that changes in small ways but follows a predictable pattern.
    Because glob syntax is simpler than regex, it’s easier to write and understand, making it a good default choice for most Selenium IDE tests.

Importance:
    Globs provide a balance between flexibility and simplicity. 
    They allow pattern matching without the complexity of regex, making test scripts more maintainable and readable, especially for testers who may not be familiar with regular expressions.
----------------------------------------------------------------------
Q: What is a Regular Expression (Regex) and how is it useful in Selenium testing?
Answer:
    A Regular Expression (or regex) is a powerful and flexible pattern matching language used to define complex string patterns. 
    Unlike globs, regex supports a rich syntax allowing fine-grained control over matching, including character classes, quantifiers, assertions, grouping, and alternation.
    For example, the regex pattern button_\d{3} matches strings like "button_123" or "button_001" — where \d{3} specifies exactly three digits.

Use cases:
    In Selenium testing, regex is especially valuable when you need to validate complex dynamic content or extract parts of strings. 
    For example, validating form inputs, matching dynamic element IDs with specific numeric patterns, or verifying text formats like dates, emails, or phone numbers.

Importance:
    Regular expressions enable very precise and complex pattern matching that globs can’t handle. 
    Although they have a steeper learning curve, mastering regex allows testers to write robust, flexible tests capable of handling dynamic and unpredictable UI elements or data.
----------------------------------------------------------------------
Q: What is WebDriverManager?
Answer :
    WebDriverManager is a Java library that automatically manages browser drivers (e.g., ChromeDriver, GeckoDriver) for Selenium. It eliminates the need to manually download and set the path for drivers.
----------------------------------------------------------------------
Q: How do you check if a dropdown is multi-select?
Answer :

Select select = new Select(driver.findElement(By.id("dropdown")));
boolean isMulti = select.isMultiple();
----------------------------------------------------------------------
Q: How do you fetch all values from a dropdown and print them?
Answer :

Select select = new Select(driver.findElement(By.id("dropdown")));
for (WebElement option : select.getOptions()) {
    System.out.println(option.getText());
}
----------------------------------------------------------------------
Q: Code to validate if a text is highlighted and underlined:
Answer: 
WebElement element = driver.findElement(By.id("highlightedText"));
String backgroundColor = element.getCssValue("background-color");
String textDecoration = element.getCssValue("text-decoration");

if (textDecoration.contains("underline") && backgroundColor != null) {
    System.out.println("Text is highlighted and underlined.");
}
----------------------------------------------------------------------
Q: How to scroll down a webpage using Selenium WebDriver?
Answer:
JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("window.scrollBy(0,500)");
----------------------------------------------------------------------
Q: How to perform right-click (context click)?
Answer:
Actions action = new Actions(driver);
WebElement element = driver.findElement(By.id("context"));
action.contextClick(element).perform();
----------------------------------------------------------------------
Q: How can you execute Selenium test cases on a remote machine?
Answer:
To run Selenium tests remotely:
    Start Selenium Grid or a cloud service like BrowserStack/Sauce Labs.
    Use RemoteWebDriver instead of ChromeDriver:
        DesiredCapabilities caps = new DesiredCapabilities();
        caps.setBrowserName("chrome");
        WebDriver driver = new RemoteWebDriver(new URL("http://remote-server:4444/wd/hub"), caps);
This connects your test to the remote machine and executes there.
----------------------------------------------------------------------
Q: What approach would you take to identify and validate broken links on a web page?
Answer:
1. Collect all links:
    List<WebElement> links = driver.findElements(By.tagName("a"));
2. For each link, send HTTP HEAD request:
    HttpURLConnection conn = (HttpURLConnection) new URL(link).openConnection();
    conn.setRequestMethod("HEAD");
    if (conn.getResponseCode() >= 400) {
        System.out.println("Broken link: " + link);
    }
This detects links returning HTTP 4xx/5xx errors.
