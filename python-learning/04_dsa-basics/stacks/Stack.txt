# What is a Stack?

- A Stack is a data structure that follows "LIFO" (Last In, First Out).
- Think of stacking books — the last book you put on top is the first one you'll remove.
- You can:
  - `push` (add) elements
  - `pop` (remove) the most recent element
  - `peek` (look at top element without removing)
  
# Example:
1. Push 10 → [10]  
2. Push 20 → [10, 20]  
3. Pop → removes 20 → [10]

-------------------------------------------------------------------------------------
# Where is it used ? 
- You might use stacks in:
  - Undo/Redo functionality
  - Tracking test steps (e.g., page navigation history)
  - Reversing sequences in scripts
  - Backtracking logic (e.g., in DFS for grid/matrix problems)

-------------------------------------------------------------------------------------
# How to Use a Stack in Python

1. Using a Python List

    stack = []
    stack.append("Home")      # Push
    stack.append("Settings")  # Push
    print(stack.pop())        # Pop → "Settings"
    print(stack[-1])          # Peek → "Home"

2. Using collections.deque (Recommended)

    from collections import deque
    stack = deque()
    stack.append("Login")
    stack.append("Dashboard")
    print(stack.pop())        # → "Dashboard"

-------------------------------------------------------------------------------------
# When to Use a Stack
	- When you need to remember and undo steps (like page navigation).
	- For temporary storage while reversing something (like a string or list).
	- In logic puzzles, like finding paths in a matrix/grid (DFS).

-------------------------------------------------------------------------------------
# When Not to Use a Stack
	- If you need to access elements by index → use a list.
	- If you want to process items in the order they were added → use a queue.

-------------------------------------------------------------------------------------
# Summary
    Stack = Last In, First Out
    Python list or deque works well
    Useful for reversing, tracking, and backtracking